{"version":3,"sources":["components/TimerControl.js","components/Timer.js","components/ControlButtons.js","App.js","serviceWorker.js","index.js","sound/bell.mp3"],"names":["TimerControl","props","className","onClick","decreaseTime","id","decrementId","labelId","title","increaseTime","incrementId","lengthId","length","Timer","timerType","createTimer","src","sound","ControlButtons","resetTime","class","startCountdown","App","state","breakLength","sessionLength","timer","isRunning","bind","countdown","stopCountdown","playSound","stopSound","this","audio","document","getElementById","minutes","Math","floor","seconds","e","target","setState","interval","setInterval","clearInterval","currentTime","play","pause","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.372b428b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TimerControl(props) {\n    return (\n        <div className=\"timerControl\">\n            <div onClick={props.decreaseTime} id={props.decrementId} className=\"decrement buttons\">-</div>\n            <p id={props.labelId}>{props.title}</p>\n            <div onClick={props.increaseTime} id={props.incrementId} className=\"increment buttons\">+</div>\n            <p id={props.lengthId}>{props.length}</p>\n        </div>\n    );\n}\n\n\nexport default TimerControl;","import React from 'react';\nimport sound from '../sound/bell.mp3'\n\nfunction Timer(props) {\n    return (\n        <div className=\"timer\">\n            <div id=\"timer-label\">{props.timerType}</div>\n            <div id=\"time-left\">\n                {props.createTimer()}\n            </div>\n            <audio\n                id=\"beep\"                \n                src={sound}>\n            </audio>\n        </div>\n    );\n}\n\n\nexport default Timer;","import React from 'react'\n\nfunction ControlButtons(props) {\n    return (\n        <div className=\"controlButtons\">\n            <div onClick={props.resetTime} className=\"buttons\" id=\"reset\">\n                <i class=\"material-icons\">restore</i>\n            </div>\n            <div onClick={props.startCountdown} className=\"buttons\" id=\"start_stop\">\n                <i class=\"material-icons\">play_arrow</i>\n                <i class=\"material-icons\">pause</i>\n            </div>\n        </div>\n    );\n}\n\nexport default ControlButtons;","import React from 'react';\nimport TimerControl from './components/TimerControl'\nimport Timer from './components/Timer'\nimport ControlButtons from './components/ControlButtons'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      // times is time in seconds\n      timer: 1500,\n      isRunning: false,\n      timerType: \"Session\"\n    }\n    this.increaseTime = this.increaseTime.bind(this);\n    this.decreaseTime = this.decreaseTime.bind(this);\n    this.resetTime = this.resetTime.bind(this);\n    this.createTimer = this.createTimer.bind(this);\n    this.countdown = this.countdown.bind(this);\n    this.startCountdown = this.startCountdown.bind(this);\n    this.stopCountdown = this.stopCountdown.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.stopSound = this.stopSound.bind(this);\n  }\n\n  componentDidMount() {\n    this.audio = document.getElementById(\"beep\");\n  }\n\n  createTimer() {\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer - minutes * 60;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return `${minutes}:${seconds}`;\n  }\n\n  increaseTime(e) {\n    if (!this.state.isRunning) {\n      if (e.target.id === \"break-increment\") {\n        if (this.state.breakLength >= 60) {\n          return;\n        }\n        this.setState(state => {\n          return { breakLength: state.breakLength + 1 }\n        })\n      } else if (e.target.id === \"session-increment\") {\n        if (this.state.sessionLength >= 60) {\n          return;\n        }\n        this.setState(state => {\n          return {\n            sessionLength: state.sessionLength + 1,\n            timer: state.timer + 60\n          }\n        })\n      }\n    }\n  }\n\n  decreaseTime(e) {\n    if (!this.state.isRunning) {\n      if (e.target.id === \"break-decrement\") {\n        if (this.state.breakLength <= 1) {\n          return;\n        }\n        this.setState(state => {\n          return { breakLength: state.breakLength - 1 }\n        })\n      } else if (e.target.id === \"session-decrement\") {\n        if (this.state.sessionLength <= 1) {\n          return;\n        }\n        this.setState(state => {\n          return {\n            sessionLength: state.sessionLength - 1,\n            timer: state.timer - 60\n          }\n        })\n      }\n    }\n  }\n  resetTime() {\n    this.stopCountdown();\n    this.stopSound()\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      isRunning: false,\n      timerType: \"Session\"\n    })\n  }\n\n  countdown() {\n    this.interval = setInterval(() => {\n\n      if (this.state.timerType === \"Session\") {\n        if (this.state.timer > 0) {\n          this.setState(state => {\n            return { timer: state.timer - 1 }\n          }, () => {\n            if (this.state.timer === 0) {\n              this.playSound();\n            }\n          })\n        } else {\n          this.setState({\n            timerType: \"Break\",\n            timer: this.state.breakLength * 60\n          });\n        }\n      } else if (this.state.timerType === \"Break\") {\n        if (this.state.timer > 0) {\n          this.setState(state => {\n            return { timer: state.timer - 1 }\n          }, () => {\n            if (this.state.timer === 0) {\n              this.playSound();\n            }\n          })\n        } else {\n          this.setState({\n            timerType: \"Session\",\n            timer: this.state.sessionLength * 60\n          });\n        }\n      }\n    }, 1000);\n  }\n\n  startCountdown() {\n    if (this.state.isRunning) {\n      this.setState({\n        isRunning: false\n      }, this.stopCountdown());\n    } else {\n      this.setState({\n        isRunning: true\n      }, this.countdown());\n    }\n  }\n\n  stopCountdown() {\n    clearInterval(this.interval)\n  }\n\n  playSound() {\n    this.audio.currentTime = 0;\n    this.audio.play();\n  }\n  stopSound() {\n    this.audio.pause();\n    this.audio.currentTime = 0;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pomodoro clock</h1>\n        <Timer\n          timerType={this.state.timerType}\n          breakLength={this.state.breakLength}\n          sessionLength={this.state.sessionLength}\n          timer={this.state.timer}\n          createTimer={this.createTimer}\n        />\n        <TimerControl\n          labelId={\"break-label\"}\n          incrementId={\"break-increment\"}\n          decrementId={\"break-decrement\"}\n          lengthId={\"break-length\"}\n          title={\"Break Length\"}\n          length={this.state.breakLength}\n          increaseTime={this.increaseTime}\n          decreaseTime={this.decreaseTime}\n        />\n        <TimerControl\n          labelId={\"session-label\"}\n          incrementId={\"session-increment\"}\n          decrementId={\"session-decrement\"}\n          lengthId={\"session-length\"}\n          title={\"Session Length\"}\n          length={this.state.sessionLength}\n          increaseTime={this.increaseTime}\n          decreaseTime={this.decreaseTime}\n        />\n        <ControlButtons\n          resetTime={this.resetTime}\n          startCountdown={this.startCountdown}\n          stopCountdown={this.stopCountdown}\n          isRunning={this.state.isRunning}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bell.10737d28.mp3\";"],"sourceRoot":""}