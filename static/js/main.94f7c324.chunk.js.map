{"version":3,"sources":["sound/bell.mp3","components/TimerControl.js","components/Timer.js","components/ControlButtons.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimerControl","props","className","onClick","decreaseTime","id","decrementId","labelId","title","increaseTime","incrementId","lengthId","length","Timer","timerType","createTimer","ControlButtons","resetTime","class","toggleCountdown","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timer","setTimer","isRunning","setIsRunning","setTimerType","audio","e","target","prevBreakLength","prevSeasonength","prevTimer","stopCountdown","currentTime","play","minutes","Math","floor","seconds","pause","src","sound","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94f7c324.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.10737d28.mp3\";","import React from 'react';\n\nfunction TimerControl(props) {\n    return (\n        <div className=\"timerControl\">\n            <div onClick={props.decreaseTime} id={props.decrementId} className=\"decrement buttons\">-</div>\n            <p id={props.labelId}>{props.title}</p>\n            <div onClick={props.increaseTime} id={props.incrementId} className=\"increment buttons\">+</div>\n            <p id={props.lengthId}>{props.length}</p>\n        </div>\n    );\n}\n\n\nexport default TimerControl;","import React from 'react';\n\n\nfunction Timer(props) {\n    \n\n    return (\n        <div className=\"timer\">\n            <div id=\"timer-label\">{props.timerType}</div>\n            <div id=\"time-left\">\n                {props.createTimer()}\n            </div>            \n        </div>\n    );\n}\n\n\nexport default Timer;","import React from 'react'\n\nfunction ControlButtons(props) {\n    return (\n        <div className=\"controlButtons\">\n            <div onClick={props.resetTime} className=\"buttons\" id=\"reset\">\n                <i class=\"material-icons\">restore</i>\n            </div>\n            <div onClick={props.toggleCountdown} className=\"buttons\" id=\"start_stop\">\n                <i class=\"material-icons\">play_arrow</i>\n                <i class=\"material-icons\">pause</i>\n            </div>\n        </div>\n    );\n}\n\nexport default ControlButtons;","// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useRef, useEffect } from 'react'\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef()\n\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n\n}\n\nexport default useInterval","import React, { useState, useEffect, useRef } from 'react';\nimport TimerControl from './components/TimerControl'\nimport Timer from './components/Timer'\nimport ControlButtons from './components/ControlButtons'\nimport sound from './sound/bell.mp3'\nimport useInterval from './hooks/useInterval'\n\n\nfunction App() {\n\n  const [breakLength, setBreakLength] = useState(1)\n  const [sessionLength, setSessionLength] = useState(1)\n  const [timer, setTimer] = useState(60)\n  const [isRunning, setIsRunning] = useState(false)\n  const [timerType, setTimerType] = useState(\"Session\")\n  const audio = useRef(null)\n\n  useEffect(() => {\n    if (timer === 0) {\n      playSound();\n    }\n  }, [timer])\n\n  function createTimer() {\n    let minutes = Math.floor(timer / 60);\n    let seconds = timer - minutes * 60;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return `${minutes}:${seconds}`;\n  }\n\n  function increaseTime(e) {\n    const { id } = e.target;\n    if (!isRunning) {\n      if (id === \"break-increment\") {\n        if (breakLength >= 60) {\n          return;\n        }\n        setBreakLength(prevBreakLength => prevBreakLength + 1)\n      } else if (id === \"session-increment\") {\n        if (sessionLength >= 60) {\n          return;\n        }\n\n        setSessionLength(prevSeasonength => prevSeasonength + 1)\n        setTimer(prevTimer => prevTimer + 60)\n      }\n    }\n  }\n\n  function decreaseTime(e) {\n    const { id } = e.target;\n    if (!isRunning) {\n      if (id === \"break-decrement\") {\n        if (breakLength <= 1) {\n          return;\n        }\n\n        setBreakLength(prevBreakLength => prevBreakLength - 1)\n      } else if (id === \"session-decrement\") {\n        if (sessionLength <= 1) {\n          return;\n        }\n        setSessionLength(prevSeasonength => prevSeasonength - 1)\n        setTimer(prevTimer => prevTimer - 60)\n      }\n    }\n  }\n\n  function resetTime() {\n    stopCountdown();\n    stopSound()\n    setBreakLength(5)\n    setSessionLength(25)\n    setTimer(1500)\n    setIsRunning(false)\n    setTimerType(\"Session\")\n\n  }\n  //Ovaj deo pokrece tajmere kad je isRunning === True\n  useInterval(() => {\n    if (timerType === \"Session\") {\n      if (timer > 0) {\n        setTimer(prevTimer => prevTimer - 1)\n      } else {\n        setTimerType(\"Break\")\n        setTimer(breakLength * 60)\n      }\n    } else if (timerType === \"Break\") {\n      if (timer > 0) {\n        setTimer(prevTimer => prevTimer - 1)\n      } else {\n        setTimerType(\"Session\")\n        setTimer(sessionLength * 60)\n      }\n    }\n  }, isRunning ? 100 : null);\n\n\n  function toggleCountdown() {\n    if (isRunning) {\n      setIsRunning(false)\n      stopCountdown()\n    } else {\n      setIsRunning(true)\n    }\n  }\n\n  function stopCountdown() {\n    setIsRunning(false)\n  }\n\n  function playSound() {\n    audio.current.currentTime = 0;\n    audio.current.play();\n  }\n  function stopSound() {\n    audio.current.pause();\n    audio.current.currentTime = 0;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Pomodoro clock</h1>\n      <Timer\n        timerType={timerType}\n        breakLength={breakLength}\n        sessionLength={sessionLength}\n        timer={timer}\n        createTimer={createTimer}\n      />\n      <TimerControl\n        labelId={\"break-label\"}\n        incrementId={\"break-increment\"}\n        decrementId={\"break-decrement\"}\n        lengthId={\"break-length\"}\n        title={\"Break Length\"}\n        length={breakLength}\n        increaseTime={increaseTime}\n        decreaseTime={decreaseTime}\n      />\n      <TimerControl\n        labelId={\"session-label\"}\n        incrementId={\"session-increment\"}\n        decrementId={\"session-decrement\"}\n        lengthId={\"session-length\"}\n        title={\"Session Length\"}\n        length={sessionLength}\n        increaseTime={increaseTime}\n        decreaseTime={decreaseTime}\n      />\n      <ControlButtons\n        resetTime={resetTime}\n        toggleCountdown={toggleCountdown}\n        stopCountdown={stopCountdown}\n        isRunning={isRunning}\n      />\n      <audio\n        id=\"beep\"\n        src={sound}\n        ref={audio}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}